#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const clap = require('clap');
const commonOptions = require('../lib/cli');
const genAsset = require('../lib/asset');

// define command
const command = clap.command('asset', '[config]')
    .version(require('../package.json').version)
    .option(...commonOptions.config)
    .option(...commonOptions.model)
    .option('-t, --type <type>', 'Specify a type of asset (prepare, js, css, libs-js or libs-css)')
    .option('--es5-libs-js', 'Use ES5 (CommonJS) to wrap libs-js code in a module')
    .option('-o, --output <filename>', 'Output file',
        (value = '') => path.resolve(process.cwd(), value)
    )
    .action(function(args) {
        const configFile = this.values.config || args[0];
        const modelName = this.values.model || args[1];
        const outputFile = this.values.output || null;
        const type = this.values.type;
        const es5LibsJs = this.values.es5LibsJs;
        const options = {
            configFile,
            modelName,
            type,
            es5LibsJs
        };

        genAsset(options).then(asset => {
            if (outputFile) {
                fs.writeFileSync(
                    path.resolve(process.cwd(), outputFile),
                    asset,
                    'utf8'
                );
                return;
            }

            // send data to parent process if run as a child process
            if (typeof process.send === 'function') {
                process.send(asset);
                return;
            }

            // otherwise write to stdout
            console.log(asset);
        }).catch(error => {
            console.error(error);
            process.exit(2);
        });
    });

// run command
try {
    command.run();
} catch (e) {
    // output user frendly message if cli error
    if (e instanceof clap.Error) {
        console.error(e.message || e);
        process.exit(2);
    }

    // otherwise re-throw exception
    throw e;
}
