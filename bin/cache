#!/usr/bin/env node

const clap = require('clap');
const commonOptions = require('../lib/cli');
const getCache = require('../lib/cache');
const { createPipelineEventHandler } = require('../lib/shared/data-pipeline');
const modes = ['default', 'readonly', 'force'];

// define command
const command = clap.command('discovery-cache [config] [model]')
    .version(require('../package.json').version)
    .option(...commonOptions.config)
    .option(...commonOptions.model)
    .option(...commonOptions.cachedir)
    .option(...commonOptions.tmpdir)
    .option(
        '--mode <mode>',
        'Mode: default (get actual or generate it not exists), readonly (get actual only, generate nothing) and force (always generate)',
        (value, current) => modes.includes(value) ? value : current,
        'default'
    )
    .option('--pretty [indent]', 'Pretty print with optionally specified indentation (4 spaces by default)', (value = 4) => Number(value) || false, false)
    .option('--hash [hash]', 'Use checksum for persistent cache')
    .action(async function({ options, args }) {
        const configFile = options.config || args[0];
        const model = options.model || args[1];
        const cachedir = options.cachedir || false;
        const tmpdir = options.tmpdir;
        const { mode, pretty, hash } = options;
        const sendToParent = typeof process.send === 'function'
            ? message => process.send(message)
            : undefined;
        const createPlanEventHandler = sendToParent
            ? (fn) => createPipelineEventHandler(fn, sendToParent)
            : undefined;

        const cacheInfo = await getCache({
            createPlanEventHandler,
            configFile,
            model,
            cachedir,
            tmpdir,
            pretty,
            hash,
            mode
        });

        // send data to parent process if run as a child process
        if (typeof sendToParent === 'function') {
            sendToParent(cacheInfo);
            return;
        }

        // otherwise write to stdout
        if (cacheInfo) {
            process.stdout.write(cacheInfo.file);
        }
    });

// run command
try {
    command.run();
} catch (e) {
    // output user frendly message if cli error
    if (e instanceof clap.Error) {
        console.error(e.message || e);
        process.exit(2);
    }

    // otherwise re-throw exception
    throw e;
}
