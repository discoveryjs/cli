#!/usr/bin/env node

const clap = require('clap');
const path = require('path');
const commonOptions = require('../lib/cli');
const build = require('../lib/build');

// define command
const command = clap.command('discovery-build [config]')
    .version(require('../package.json').version)
    .option(...commonOptions.config)
    .option(...commonOptions.model)
    .option(...commonOptions.noCache)
    .option(...commonOptions.cachedir)
    .option(...commonOptions.tmpdir)
    .option(...commonOptions.checkCacheTtl)
    .option(...commonOptions.minify)
    .option(...commonOptions.dataCompression)
    .option(...commonOptions.sourcemap)
    .option(...commonOptions.embed)
    .option(...commonOptions.experimentalJsonxl)
    .option('-o, --output <path>', 'Path for a build result (`build` by default)',
        (value = '') => path.resolve(process.cwd(), value),
        'build'
    )
    .option('--entry-names [pattern]', 'Specify the file names of the output HTML files corresponding to each model', '[slug]/index')
    .option('-s, --single-file', 'Output a model build as a single HTML file per model')
    .option('--clean', 'Clean the output directory before emit a build files')
    .option('--no-data', 'Don\'t include data into a model build')
    .option('--exclude-model-on-data-fail', 'Exclude models from the result if their data generation fails, ignoring the failure instead of halting the build (exit code: 1)')
    .option('--pretty-data [indent]', 'Pretty print of model data if any', (value = 4) => Number(value) || false, false)
    .option('--model-download', 'Enable model download feature')
    .option('--no-model-data-upload', 'Ignore model data upload feature setup in config')
    .option('--model-reset-cache', 'Enable model cache reset feature')
    .option('--serve-only-assets', 'Include server only assets into build')
    .option('--no-dev', 'Disable using Discovery.js "src" assets when available (disables discovery-dev condition)')
    .action(async function({ options, args }) {
        const configFile = options.config || args[0];

        const { suppressedFailures } = await build({
            ...options,
            configFile
        });

        if (typeof process.send === 'function') {
            process.send({ status: 'OK', suppressedFailures });
        }

        if (suppressedFailures) {
            process.exit(1);
        }
    });

// run command
try {
    command.run();
} catch (e) {
    // output user frendly message if cli error
    if (e instanceof clap.Error) {
        console.error(e.message || e);
        process.exit(2);
    }

    // otherwise re-throw exception
    throw e;
}
