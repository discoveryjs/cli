#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const clap = require('clap');
const { stringifyInfo, stringifyStream } = require('@discoveryjs/json-ext');
const commonOptions = require('../lib/cli');
const getData = require('../lib/data');

// define command
const command = clap.command('discovery-data [config] [model]')
    .version(require('../package.json').version)
    .option(...commonOptions.config)
    .option(...commonOptions.model)
    .option('--pretty [indent]', 'Pretty print with optionally specified indentation (4 spaces by default when enabled)', (value = 4) => Number(value) || false, false)
    .option('-o, --output <filename>', 'Output file',
        (value = '') => path.resolve(process.cwd(), value)
    )
    .action(async function({ options, args }) {
        const configFile = options.config || args[0];
        const model = options.model || args[1];
        const outputFile = options.output || null;
        const pretty = options.pretty;

        const payload = await getData({
            configFile,
            model,
            pretty
        });
        const stream = stringifyStream(payload, null, pretty);

        if (outputFile) {
            stream.pipe(fs.createWriteStream(outputFile));
            return;
        }

        // send data to parent process if run as a child process
        if (typeof process.send === 'function') {
            const payloadInfo = stringifyInfo(payload, null, null, { async: true });
            let size;

            if (!payloadInfo.async.length && !payloadInfo.circular.length) {
                size = payloadInfo.minLength;
            }

            process.send({ payload: 'stream', size });
            return new Promise((resolve, reject) => {
                stream
                    .on('error', reject)
                    .pipe(fs.createWriteStream(null, { fd: 4 }))
                    .on('finish', resolve)
                    .on('error', reject);
            });
        }

        // otherwise write to stdout
        stream.pipe(process.stdout);
    });

// run command
try {
    command.run();
} catch (e) {
    // output user frendly message if cli error
    if (e instanceof clap.Error) {
        console.error(e.message || e);
        process.exit(2);
    }

    // otherwise re-throw exception
    throw e;
}
