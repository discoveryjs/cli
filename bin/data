#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const clap = require('clap');
const commonOptions = require('../lib/cli');
const getData = require('../lib/data');

// define command
const command = clap.command('data', '[config] [model]')
    .option(...commonOptions.config)
    .option(...commonOptions.model)
    .option(...commonOptions.cache)
    .option('--rewrite-cache', 'Ignore existing cache')
    .option('--pretty [indent]', 'Pretty print with optionally specified indentation (4 spaces by default)', (value = 4) => Number(value) || false, false)
    .option('--background', 'Run as background process, no output')
    .option('-o, --output <filename>', 'Output file',
        (value = '') => path.resolve(process.cwd(), value)
    )
    .version(require('../package.json').version)
    .action(function(args) {
        const configFile = this.values.config || args[0];
        const model = this.values.model || args[1];
        const outputFile = this.values.output || null;
        const cache = this.values.cache || false;
        const rewriteCache = this.values.rewriteCache;
        const background = this.values.background;
        const pretty = this.values.pretty;

        const options = {
            configFile,
            model,
            cache,
            rewriteCache,
            pretty
        };

        getData(options).then(stream => {
            if (outputFile) {
                stream.pipe(fs.createWriteStream(outputFile));
                return;
            }

            // send data to parent process if run as a child process
            if (typeof process.send === 'function') {
                // FIXME: temporary solution
                if (background) {
                    process.send('');
                    process.exit();
                    return;
                }

                process.send('stream');
                stream.pipe(fs.createWriteStream(null, { fd: 4 }));
                return;
            }

            // otherwise write to stdout
            stream.pipe(process.stdout);
        }).catch(error => {
            console.error(error);
            process.exit(2);
        });
    });

// run command
try {
    command.run();
} catch (e) {
    // output user frendly message if cli error
    if (e instanceof clap.Error) {
        console.error(e.message || e);
        process.exit(2);
    }

    // otherwise re-throw exception
    throw e;
}
