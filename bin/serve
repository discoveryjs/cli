#!/usr/bin/env node

const path = require('path');
const clap = require('clap');
const commonOptions = require('../lib/cli');
const createServer = require('../lib/serve');
const DEFAULT_PORT = 8123;

// define command
const command = clap.command('discovery', '[config]')
    .version(require('../package.json').version)
    .option(...commonOptions.config)
    .option(...commonOptions.model)
    .option(...commonOptions.cacheDir)
    .option('--dev', 'Enable developer mode')
    .option('--prebuild [path]', 'Prebuild model\'s static in path (path is optional, `build` by default)',
        (value = 'build') => value ? path.resolve(process.cwd(), value) : value,
        false
    )
    .option('--no-warmup', 'Disable model\'s data cache warm up on server start')
    .option('--bail', 'Exit immediately on first warmup task failure')
    .option('-p, --port <n>', 'Listening port (default: ' + DEFAULT_PORT + ')',
        value => isNaN(value) ? 0 : Number(value)
    )
    .action(function(args) {
        const configFile = this.values.config || args[0];
        const port = [
            this.values.port,
            process.env.PORT,
            DEFAULT_PORT
        ].filter(value => !isNaN(value))[0];
        const options = Object.assign({}, this.values, {
            configFile,
            port
        });

        createServer(options);
    });

// run command
try {
    command.run();
} catch (e) {
    // output user frendly message if cli error
    if (e instanceof clap.Error) {
        console.error(e.message || e);
        process.exit(2);
    }

    // otherwise re-throw exception
    throw e;
}
